'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _isGeneratorFunction = /*#__PURE__*/require('./isGeneratorFunction');

var _isGeneratorFunction2 = /*#__PURE__*/_interopRequireDefault(_isGeneratorFunction);

var _isAsyncFunction = /*#__PURE__*/require('./isAsyncFunction');

var _isAsyncFunction2 = /*#__PURE__*/_interopRequireDefault(_isAsyncFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
/**
 * Checks if input value is `Function`.
 *
 * @func isFunction
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isNotFunction|isNotFunction}, {@link RA.isAsyncFunction|isNotAsyncFunction}, {@link RA.isGeneratorFunction|isGeneratorFunction}
 * @example
 *
 * RA.isFunction(function test() { }); //=> true
 * RA.isFunction(function* test() { }); //=> true
 * RA.isFunction(async function test() { }); //=> true
 * RA.isFunction(() => {}); //=> true
 * RA.isFunction(null); //=> false
 * RA.isFunction('abc'); //=> false
 */
/* eslint-enable max-len */
var isFunction = /*#__PURE__*/(0, _ramda.anyPass)([function (val) {
  return Object.prototype.toString.call(val) === '[object Function]';
}, _isGeneratorFunction2.default, _isAsyncFunction2.default]);

exports.default = isFunction;