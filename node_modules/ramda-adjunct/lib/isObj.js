'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _isNotNull = /*#__PURE__*/require('./isNotNull');

var _isNotNull2 = /*#__PURE__*/_interopRequireDefault(_isNotNull);

var _isFunction = /*#__PURE__*/require('./isFunction');

var _isFunction2 = /*#__PURE__*/_interopRequireDefault(_isFunction);

var _isOfTypeObject = /*#__PURE__*/require('./internal/isOfTypeObject');

var _isOfTypeObject2 = /*#__PURE__*/_interopRequireDefault(_isOfTypeObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
/**
 * Checks if input value is language type of `Object`.
 *
 * @func isObj
 * @aliases isObject
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isNotObj|isNotObj}, {@link RA.isObjLike|isObjLike}, {@link RA.isPlainObj|isPlainObj}
 * @example
 *
 * RA.isObj({}); //=> true
 * RA.isObj([]); //=> true
 * RA.isObj(() => {}); //=> true
 * RA.isObj(null); //=> false
 * RA.isObj(undefined); //=> false
 */
/* eslint-enable max-len */
var isObj = /*#__PURE__*/(0, _ramda.both)(_isNotNull2.default, /*#__PURE__*/(0, _ramda.either)(_isOfTypeObject2.default, _isFunction2.default));

exports.default = isObj;