'use strict';

exports.__esModule = true;
exports.aliases = exports.isNotSameType = exports.isSameType = exports.typeEquals = exports.type = undefined;

var _ramda = /*#__PURE__*/require('ramda');

// type :: Monad a => a -> String
var type = /*#__PURE__*/exports.type = (0, _ramda.either)( /*#__PURE__*/(0, _ramda.path)(['@@type']), /*#__PURE__*/(0, _ramda.path)(['constructor', '@@type']));

// typeEquals :: Monad a => String -> a -> Boolean
var typeEquals = /*#__PURE__*/exports.typeEquals = (0, _ramda.curry)(function (typeIdent, monad) {
  return type(monad) === typeIdent;
});

// isSameType :: (Monad a, Monad b) => a -> b -> Boolean
var isSameType = /*#__PURE__*/exports.isSameType = (0, _ramda.curryN)(2, /*#__PURE__*/(0, _ramda.useWith)(_ramda.equals, [type, type]));

// isNotSameType :: (Monad a, Monad b) => a -> b -> Boolean
var isNotSameType = /*#__PURE__*/exports.isNotSameType = (0, _ramda.complement)(isSameType);

// aliases :: Prototype -> NewPrototypePairs
//     Prototype = Object
//     NewPrototypePairs = Array
var aliases = /*#__PURE__*/exports.aliases = (0, _ramda.pipe)(_ramda.toPairs, /*#__PURE__*/(0, _ramda.map)( /*#__PURE__*/(0, _ramda.over)( /*#__PURE__*/(0, _ramda.lensIndex)(0), /*#__PURE__*/(0, _ramda.replace)('fantasy-land/', ''))));