'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _curryRightN = /*#__PURE__*/require('./curryRightN');

var _curryRightN2 = /*#__PURE__*/_interopRequireDefault(_curryRightN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a curried equivalent of the provided function.
 * This function is like curry, except that the provided arguments order is reversed.
 *
 * @func curryRight
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/1.12.0|v1.12.0}
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry
 * @return {Function}  A new, curried function
 * @see {@link http://ramdajs.com/docs/#curry|R.curry}, {@link RA.curryRightN|curryRightN}
 * @example
 *
 * const concatStrings = (a, b, c) => a + b + c;
 * const concatStringsCurried = RA.curryRight(concatStrings);
 *
 * concatStringCurried('a')('b')('c'); // => 'cba'
 */
var curryRight = /*#__PURE__*/(0, _ramda.converge)(_curryRightN2.default, [_ramda.length, _ramda.identity]);

exports.default = curryRight;