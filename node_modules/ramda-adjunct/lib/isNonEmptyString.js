'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _isString = /*#__PURE__*/require('./isString');

var _isString2 = /*#__PURE__*/_interopRequireDefault(_isString);

var _isNotObj = /*#__PURE__*/require('./isNotObj');

var _isNotObj2 = /*#__PURE__*/_interopRequireDefault(_isNotObj);

var _isNotEmpty = /*#__PURE__*/require('./isNotEmpty');

var _isNotEmpty2 = /*#__PURE__*/_interopRequireDefault(_isNotEmpty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if input value is not an empty `String`.
 *
 * @func isNonEmptyString
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/2.4.0|v2.4.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isEmptyString|isEmptyString}
 * @example
 *
 * RA.isNonEmptyString('42'); // => true
 * RA.isNonEmptyString(''); // => false
 * RA.isNonEmptyString(new String('42')); // => false
 * RA.isNonEmptyString(new String('')); // => false
 * RA.isNonEmptyString([42]); // => false
 * RA.isNonEmptyString({}); // => false
 * RA.isNonEmptyString(null); // => false
 * RA.isNonEmptyString(undefined); // => false
 * RA.isNonEmptyString(42); // => false
 */
var isNonEmptyString = /*#__PURE__*/(0, _ramda.allPass)([_isString2.default, _isNotObj2.default, _isNotEmpty2.default]);

exports.default = isNonEmptyString;