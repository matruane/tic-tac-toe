'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _mergePath = /*#__PURE__*/require('./mergePath');

var _mergePath2 = /*#__PURE__*/_interopRequireDefault(_mergePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new object with the own properties of the object under the `p`
 * merged with the own properties of the provided `source`.
 * If a key exists in both objects, the value from the `source` object will be used.
 *
 * @func mergeProp
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}
 * @category Object
 * @sig [k] -> {a} -> {k: {a}} -> {k: {a}}
 * @see {@link RA.mergePath|mergePath}
 * @param {!Array} p The property of the destination object
 * @param {!Object} source The source object
 * @param {!Object} obj The object that has destination object under corresponding property
 * @return {!Object} The new version of object
 * @example
 *
 * RA.mergeProp(
 *  'outer',
 *  { foo: 3, bar: 4 },
 *  { outer: { foo: 2 } }
 * ); //=> { outer: { foo: 3, bar: 4 } };
 */
var mergeProp = /*#__PURE__*/(0, _ramda.curry)(function (p, subj, obj) {
  return (0, _mergePath2.default)((0, _ramda.of)(p), subj, obj);
});

exports.default = mergeProp;