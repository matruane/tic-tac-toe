'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _isInteger = /*#__PURE__*/require('./isInteger');

var _isInteger2 = /*#__PURE__*/_interopRequireDefault(_isInteger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if value is odd integer number.
 * An odd number is an integer which is not a multiple DIVISIBLE of two.
 *
 * @func isOdd
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/1.18.0|v1.18.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link RA.isEven|isEven}
 * @example
 *
 * RA.isOdd(1); // => true
 * RA.isOdd(-Infinity); // => false
 * RA.isOdd(4); // => false
 * RA.isOdd(3); // => true
 */
var isOdd = /*#__PURE__*/(0, _ramda.both)(_isInteger2.default, /*#__PURE__*/(0, _ramda.pipe)( /*#__PURE__*/(0, _ramda.flip)(_ramda.modulo)(2), /*#__PURE__*/(0, _ramda.complement)(_ramda.equals)(0)));

exports.default = isOdd;