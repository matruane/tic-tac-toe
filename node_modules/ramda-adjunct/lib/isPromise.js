'use strict';

exports.__esModule = true;

var _ramda = /*#__PURE__*/require('ramda');

var _isObj = /*#__PURE__*/require('./isObj');

var _isObj2 = /*#__PURE__*/_interopRequireDefault(_isObj);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if input value is a native `Promise`.
 * The Promise object represents the eventual completion (or failure)
 * of an asynchronous operation, and its resulting value.
 *
 * @func isPromise
 * @memberOf RA
 * @since {@link https://char0n.github.io/ramda-adjunct/2.1.0|v2.1.0}
 * @category Type
 * @sig * -> Boolean
 * @param {*} val The value to test
 * @return {boolean}
 * @see {@link https://promisesaplus.com/|Promises/A+}, {@link RA.isThenable|isThenable}
 * @example
 *
 * RA.isPromise(null); // => false
 * RA.isPromise(undefined); // => false
 * RA.isPromise([]); // => false
 * RA.isPromise(Promise.resolve()); // => true
 * RA.isPromise(Promise.reject()); // => true
 * RA.isPromise({ then: () => 1 }); // => false
 */
var isPromise = /*#__PURE__*/(0, _ramda.both)(_isObj2.default, /*#__PURE__*/(0, _ramda.pipe)(_ramda.toString, /*#__PURE__*/(0, _ramda.equals)('[object Promise]')));

exports.default = isPromise;