import { useWith, curry, curryN, toPairs, equals, over, lensIndex, replace, pipe, map, path, either, complement } from 'ramda';

// type :: Monad a => a -> String
export var type = /*#__PURE__*/either( /*#__PURE__*/path(['@@type']), /*#__PURE__*/path(['constructor', '@@type']));

// typeEquals :: Monad a => String -> a -> Boolean
export var typeEquals = /*#__PURE__*/curry(function (typeIdent, monad) {
  return type(monad) === typeIdent;
});

// isSameType :: (Monad a, Monad b) => a -> b -> Boolean
export var isSameType = /*#__PURE__*/curryN(2, /*#__PURE__*/useWith(equals, [type, type]));

// isNotSameType :: (Monad a, Monad b) => a -> b -> Boolean
export var isNotSameType = /*#__PURE__*/complement(isSameType);

// aliases :: Prototype -> NewPrototypePairs
//     Prototype = Object
//     NewPrototypePairs = Array
export var aliases = /*#__PURE__*/pipe(toPairs, /*#__PURE__*/map( /*#__PURE__*/over( /*#__PURE__*/lensIndex(0), /*#__PURE__*/replace('fantasy-land/', ''))));